package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\xc1\x72\xd3\x30\x10\x86\xef\x3c\x85\xf0\x3d\x56\xd3\x5e\x98\xd4\xc9\xa5\xe5\x02\x07\x98\xa1\xc3\xc0\xa9\xa3\x48\x1b\xa4\x54\x96\xcc\xee\xba\x49\x60\x78\x77\xd6\x51\x8c\xc3\x30\xbd\x30\x39\x59\xbb\xbf\xe6\xff\x56\x5a\xad\x9b\xd7\xf7\x1f\xee\x1e\xbe\x7e\x7c\xab\x3c\xb7\x71\xf5\xaa\x29\x1f\xa5\x1a\x0f\xc6\x0d\x0b\x59\x72\xe0\x08\xab\xbb\x9c\xa8\x8f\xea\xfd\x67\x75\x6f\xc8\xaf\xb3\x41\xd7\xe8\x22\x95\x6d\x64\x31\x74\xac\x08\xed\xb2\xf2\xcc\xdd\x42\x6b\xeb\xd2\x96\x6a\x1b\x73\xef\x36\xd1\x20\xd4\x36\xb7\xda\x6c\xcd\x5e\xc7\xb0\x26\x8d\x60\x2c\xeb\xab\x7a\x7e\x5d\xcf\x4b\x50\x6f\xa9\x5a\x35\xba\x58\x5d\xc6\xf7\xdd\xa7\x2f\x0f\x68\x12\x6d\x32\xb6\x80\x97\x01\x6c\xbf\xf7\x80\x07\x2d\xf6\x02\x28\x41\xdd\x86\x74\x19\x73\xf2\x79\xe7\xf2\x2e\xc9\x01\x6e\xc4\x7e\x0c\x5f\x02\xc4\x90\x9e\x14\x42\x5c\x56\xc4\x87\x08\xe4\x01\xb8\x52\x1e\x61\x53\x80\x24\xc4\xd6\xec\x05\x5a\xaf\x73\x66\x62\x34\xdd\x10\x0c\xd0\x3f\x09\x7d\x23\xac\x6b\x6d\x89\xa6\xdc\x11\x28\x99\x6a\x3c\xc9\x60\xaf\xf8\xd0\xc1\xb2\x62\xd8\xb3\x9e\x34\xa5\x3a\x04\xf5\xf3\xb4\x56\x6a\xe7\x03\xc3\x8c\x3a\x63\x61\x31\x48\xb3\x9d\xf8\xdd\x4e\x72\x46\x77\x4c\x2d\xd4\x5a\x7a\xf5\x34\x1b\x12\x93\x9c\x9f\x01\x37\x31\xef\x16\xca\xf4\x9c\xc7\xfc\xaf\xd3\xb7\x16\xeb\xf6\x71\x9d\xdd\xe1\x0c\x28\x07\x9c\x79\x08\xdf\x3c\x2f\xd4\xfc\x0a\xda\xc9\x6c\x93\x13\xcf\x28\xfc\x90\x42\xae\xea\x37\xe7\x8a\xed\x91\x32\x4a\x7d\x39\x24\x06\x7c\x99\xf3\x08\xfb\xce\x24\x07\xee\x0c\xf8\x9f\xb6\xd2\xbb\xe1\x16\x8f\x13\xa6\xc7\x11\x6b\x06\xc8\xe9\x92\x5d\x78\x56\xc1\x2d\x2b\x2b\xfe\x90\xa4\x91\x36\x1a\xa2\x12\x9b\x90\x00\x87\xfe\xcb\xa6\xbf\x5f\xd7\x59\x53\xb6\xb4\xbf\xf5\x06\xdb\x9c\x0e\x4b\xc6\x1e\xaa\xf2\xf4\xca\x46\xd2\x6e\x9c\xdd\x7f\x9e\x52\xa3\x4b\x19\x52\xd7\xf1\x1f\xf0\x3b\x00\x00\xff\xff\xf1\xe1\x54\x5c\x1b\x04\x00\x00")

func index_html_bytes() ([]byte, error) {
	return bindata_read(
		_index_html,
		"index.html",
	)
}

func index_html() (*asset, error) {
	bytes, err := index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "index.html", size: 1051, mode: os.FileMode(436), modTime: time.Unix(1421920268, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _scripts_dashboard_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x18\x5d\x6f\xdb\x36\xf0\xdd\xbf\x82\x11\x86\x46\x5e\x1d\xd9\x7d\xc8\x8b\x63\xbb\x40\xd3\x0d\x0b\xb0\xf5\xa1\x29\xb0\x01\x45\x51\x30\x12\x63\xab\x95\x45\x8d\xa4\xd2\x18\x86\xfe\xfb\xee\xf8\x25\x4a\xb6\x92\x2c\x41\x5f\x22\xf3\x78\xdf\x5f\xbc\xcb\xe8\x8e\x0a\x72\x49\x15\x5b\x73\xb1\x23\x4b\xf2\x91\xd1\x54\x25\xa9\x60\x00\xba\x2c\xa8\x94\xf1\x7e\x44\x88\x60\x65\xc6\xc4\x9c\xdc\xd6\x65\xaa\x72\x5e\xc6\x63\x82\x60\xbc\x50\xb5\x28\x49\xac\x0f\x64\xc1\x2b\xbc\x25\x77\xb4\xa8\xd9\x72\xaf\x36\xb9\x4c\x2a\xc1\x2b\x99\x94\x74\xcb\x9a\xd5\x01\x64\x31\x35\x14\x2b\x4d\x3f\x86\xbf\xcd\xa8\x19\x5f\x8c\x42\xad\x72\x26\x07\xf5\xda\xd0\x32\x2b\xd8\x25\x7c\xd6\x2c\xd0\x8e\xdd\xb1\x52\x39\x15\x03\x99\x75\x95\x21\xb9\xb5\xd6\xa0\x25\x8a\x8a\x35\x53\x89\xd6\x59\x6b\x30\x79\xc8\x60\x54\x2c\xa5\x0a\x55\x0a\x18\x03\x5b\x9a\x6c\x69\x15\x7b\x7c\xc0\x99\x90\x1c\x98\xdc\x3b\xca\xbe\xb3\xd0\x5f\xde\xf1\xdf\xd9\x6e\xb9\xd7\xe8\x0d\x41\xcf\x2c\xf7\xc0\xa0\x99\xae\x2c\x2a\xb8\x04\x3f\x8d\xfd\xf6\x18\x2d\x24\x2b\x58\xaa\x0c\x61\x94\x5a\x9e\xd1\x91\x30\xa4\xb5\x00\xcb\x94\x13\xdb\x10\x5e\x1a\xe7\x59\xac\xd0\x9f\xcd\xca\xeb\x89\xca\xc8\xc6\x49\x9b\x1a\x71\x36\x66\x17\xdd\xa0\x5d\x29\xb6\xfd\xff\x69\x84\x94\x79\x0a\x99\xb3\x24\xd1\xba\xd8\x55\x1b\x3c\x44\x17\xfe\x4e\x2a\xaa\xea\x9e\xcf\x0d\xcc\xe0\xe4\xb7\x24\x3e\xb8\x22\x27\xc0\x4d\xd6\x69\xca\xa4\x8c\xda\x28\x68\x39\xaf\xe1\x8a\x78\x49\x67\xb4\x60\x42\x59\x79\xc4\x49\xd3\x38\xfa\xe6\x2c\x22\xaf\x87\x44\x37\x47\x23\xa2\x20\x4b\xd0\xec\x0f\x3a\x96\x06\x3f\x70\xe8\x42\x65\xab\x85\xac\x68\x19\x62\xa1\x26\x0d\x99\xae\x48\xa7\x4c\x78\x86\x65\x02\xf8\x1d\xe2\x10\x85\x66\x99\x00\x13\x1f\xc1\x52\xf9\x96\x81\x1e\xdb\xea\x08\xde\x02\xa3\xf6\x8e\x67\xbb\x0e\x45\xba\xc9\x0b\xe0\x5c\x02\x81\xbf\x0f\x69\xe1\xb7\x18\x4e\x02\x44\x7f\xac\x6e\x8b\x3c\xfd\x7e\x24\x1b\xb4\x0e\x92\xa9\x6b\x70\x1b\x8b\xf7\x84\xdd\x83\xa7\x32\x96\xcd\xc9\x89\xb9\x42\x78\xe2\xa0\x50\x15\xae\x6a\xa1\x8e\xaf\xca\x5c\xe5\xb4\xd0\xa4\xc3\xfd\x2a\xe4\x79\x4b\x0b\xc9\x48\x73\xf1\xb4\xd2\x47\x13\xae\x95\xc8\xcb\x35\xe6\x6a\x0e\x86\x7e\xbd\x01\x4b\xa3\x6e\x1a\x76\x35\x6c\x73\x6f\x88\xfc\xab\x43\x8d\x1e\xc8\xa9\x4a\xb0\x30\x5d\x02\x5e\xba\x8e\xd1\x99\xdd\x32\x46\x48\x33\x14\x52\xe0\xd6\x0b\x9e\x89\xdd\x7b\x2a\x37\x37\x9c\x8a\x6c\x30\x78\x05\xa7\x59\xdb\x9b\x7f\x17\x7c\x7b\xcd\xc4\xdd\x51\x97\xfd\x92\xd0\x6f\xf4\x3e\x76\xe6\xd7\xa2\x98\x93\x68\x4a\xab\x7c\xfa\x16\x3a\x9e\x8c\x26\xf6\x02\xfb\xe7\xa7\x5d\x05\x11\x3b\xfd\x26\x79\x79\xea\xe0\xb6\x7a\x03\xce\x88\x39\x21\x8a\xdd\xeb\xec\xa8\xe5\x04\xdc\xf4\x6f\x0d\x99\xdd\x3a\xf9\x20\x81\x52\xaf\xec\x9c\x18\xfa\x5e\x1f\x34\xe0\xcf\xb3\x2f\x3a\x95\x74\x04\x92\x1b\xe8\xc6\x3a\x98\x63\xa7\x0c\x13\x82\x87\x46\xde\x6f\xc4\xc4\xf6\x8a\x09\x5e\x86\x1a\x40\x29\x4b\x5e\x40\x0a\x20\x4d\xdc\x31\x39\x24\x49\x14\x37\x11\x8c\xc7\xe3\x8b\x23\xa2\x83\xae\xaf\x73\x13\x5d\xef\x03\xf4\xa0\xe7\x9d\x02\x05\x5f\xc7\xd1\x20\x19\x68\x13\xe4\x6b\xcf\x2b\x63\x9f\xd3\x27\x0f\x20\x05\x46\x83\xc7\x3f\x41\x97\xe1\xb5\x32\x55\x30\x20\x76\x12\xb6\xd2\x8a\x17\xc5\xdf\x34\x57\x64\x4a\xce\xbd\x0b\x5c\xee\x07\xc5\x80\xa9\x89\xb9\x04\x59\x39\x9c\x54\xbe\x4d\x1f\x55\x15\x2e\xa3\xb7\x82\x01\x54\xb2\x57\x3f\x40\xe6\xf2\xfc\x5c\xbe\xd2\x8f\xee\xb2\x47\xa9\x81\x3f\x29\x39\xd1\x12\x6c\xc6\x02\x4c\x79\x89\xc7\x02\x6f\xe9\xe7\x13\x55\x06\x96\x56\x62\x02\xbd\xf0\x23\x93\x15\xa4\x01\xfb\x83\x51\xe8\x68\xf1\xe9\x3f\x67\x97\x70\xac\x8b\xb3\x2b\xc4\x3d\x1d\x0f\xd5\x8b\x87\x43\xf4\xa1\x43\xb9\xaa\x09\xc1\xc8\x60\x4e\x3a\x6e\xd2\x8c\xd0\xae\xb9\xf9\xb4\xf0\xe6\x68\x6e\xbf\xa4\xac\x74\x56\xeb\x74\x30\xd4\x18\x3e\x44\xed\x78\x04\x43\xdc\x1d\x19\x7c\xb2\xfd\x4a\xce\x3d\x2a\x26\x38\xd0\x92\x25\x34\x64\x7a\xc3\x61\x0e\x08\x25\x12\xc7\x66\xd6\x9a\xf3\xb2\x50\xfe\xe8\xc6\xae\xff\xd8\x85\x2e\x24\x47\xfb\x51\x67\x14\xec\x91\xa3\x4f\xe6\xba\x50\x9e\xf3\x2a\x8e\x3a\x41\xff\xfc\xc5\x85\x28\x6c\xa0\x2d\xd4\x26\xc1\xcc\x9d\x8d\xec\x1a\xa0\xb7\x79\xc9\x32\x07\xb6\x06\x79\xb8\x51\xdf\xb7\xb4\x94\x6f\x21\x49\xa1\x4c\xdf\xe7\xd9\x5f\xbc\x2e\xd5\xd0\x40\x30\xf4\xec\xc4\xa1\x27\x06\xbc\x1e\xb7\x2d\xb4\xbb\x03\x04\xc2\xc0\x48\x27\xaf\xf7\x8e\xa3\x61\x6d\x4e\xf4\x2e\x12\x9d\x33\xf1\x38\xe8\x55\x3d\x72\xed\x80\x70\x06\x60\x54\x74\x52\x25\x44\x0b\xd8\x1c\xaf\xca\xbe\xd7\x0f\x83\xd5\x7f\xdb\x70\x15\x79\x4e\x88\xc6\x8f\x8f\x44\xfd\x11\x25\xcb\xef\x82\xc9\x72\xf3\x66\x65\x62\x21\x68\xb6\x98\xc2\xe9\x60\xf1\xc1\xdd\x0e\x7b\x8b\x9d\x5b\x6c\xdb\xf6\x77\x4d\xdf\x98\x2e\x5e\x7f\x99\xe9\x86\xd6\xe2\x76\x81\xed\x4a\x85\x93\x2f\xbd\x29\xc2\x91\x2a\x32\x00\xfd\xf7\x4c\xc2\xbb\x5c\xc1\x40\xb6\x0a\x5a\xc1\x42\x6d\xa0\x95\x86\x10\x3d\xea\xaf\x00\xbe\xc2\x41\x1d\x26\xe2\x8d\x3e\xd8\x91\xdc\x9f\xfd\xf0\xed\x21\x68\xb5\x39\xf8\x29\xda\xf2\x9b\x1e\x08\xd1\xe3\xf9\x9f\xb9\x54\x87\xbe\xd2\xd1\xc7\xa5\x61\x14\xd0\xa3\xfe\xed\x90\xee\x63\x72\x6c\x4a\xd7\x5c\x9f\xb7\xae\x01\xf5\x07\xb0\xf9\xd1\x4d\x18\x11\x9f\xb0\x0a\xeb\xc5\xd1\xac\xc1\xf0\xcb\xec\x3d\x04\xff\x76\x00\xd6\xb1\x16\xe6\x36\x1f\xe2\xfd\x6b\x2f\xda\x65\xc7\xbe\x24\x16\x7e\xb0\x88\xc1\x6e\xab\x2f\x50\xed\x26\xf0\x21\x6a\xf3\xc4\xe5\x5b\xe1\x00\x1f\x66\x51\x6e\xfd\x1a\xa4\xce\xde\x7b\xab\xdd\xa2\x35\xdd\x61\x64\x4c\x28\x8c\xeb\x51\xc6\xa2\x1d\xc8\xdd\xf3\xb5\xdc\xbf\x99\xcd\x66\x18\x75\x2c\xce\x8c\xa7\xf5\x16\xff\x91\x01\x7d\xfe\xb7\x82\xe1\xcf\x77\xbb\xab\x2c\x3e\x85\xc7\x52\xc1\x01\xde\x79\xe0\xfb\x5f\x00\x00\x00\xff\xff\x7e\xee\x96\xaa\xe8\x11\x00\x00")

func scripts_dashboard_js_bytes() ([]byte, error) {
	return bindata_read(
		_scripts_dashboard_js,
		"scripts/dashboard.js",
	)
}

func scripts_dashboard_js() (*asset, error) {
	bytes, err := scripts_dashboard_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "scripts/dashboard.js", size: 4584, mode: os.FileMode(436), modTime: time.Unix(1421920302, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": index_html,
	"scripts/dashboard.js": scripts_dashboard_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"index.html": &_bintree_t{index_html, map[string]*_bintree_t{
	}},
	"scripts": &_bintree_t{nil, map[string]*_bintree_t{
		"dashboard.js": &_bintree_t{scripts_dashboard_js, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

